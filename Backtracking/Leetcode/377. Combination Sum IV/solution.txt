/*
Here we need to need to form all possible combination
intially this problem can look as basic dp drop to find all combination
the only diff here is that we can take a wieght again after moving forward in index.
eg:- arr = [1,2,4] sum = 4

ans = [1 1 2] , [1 2 1] ,[ 2 1 1] ...
these all are valid answer now how to tackle it
instead of calling for idx + 1 , we need to call from index '0' every time..
now for base case we can sort array and when our sum is lesser than
arr[0] we can say we can't form possible combination.
now since only one index ie sum is changing so 1D memoization dp is required.
Please upvote if you like my solution.
*/

class Solution {
public:
    vector <int> arr;  
    int dp[1001];
    int n;
    long long f(int t)
    {
      if(!t) return 1;
      if(t<arr[0]) return 0;
      
      if(dp[t] != -1) return dp[t];
        
      dp[t] = 0;
      for(int i = 0;i<n;i++)
      {
          if(t >= arr[i])
              dp[t] += f(t-arr[i]);
      }
        
     return dp[t];
    }
    
    int combinationSum4(vector<int>& a, int t) {
        sort(a.begin(),a.end());
        arr = a;
        n = a.size();
        memset(dp,-1,sizeof(dp));
        return f(t);
    }
};
