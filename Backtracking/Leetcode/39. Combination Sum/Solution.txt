/*
  use vector like a stack pop element after use its just like knapsack 
*/
class Solution {
public:
    vector<vector<int>>ans;
    
    void recurr(vector<int>&c , int target , int idx ,vector<int>&arr)
    {
        if(idx == -1)
            return;
       
        if(target == 0)
        {
            ans.push_back(arr);
            return;
        }
        
         recurr(c,target,idx-1,arr);
        
        if(target>= c[idx])
        {
            arr.push_back(c[idx]);
            recurr(c,target-c[idx], idx , arr);
            arr.pop_back();
        }
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
      
        int n  = candidates.size();
        vector<int>find;
        recurr(candidates,target,n-1,find);
        
        return ans;
    }
};
