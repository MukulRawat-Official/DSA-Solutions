long long max(long long a , long long  b)
{
    if(a>b) return a; return b;
}
class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int,int>>a(n);
        int mod = 1e9+ 7;
        for(int i =0;i<n;i++)
        {
            a[i].first = efficiency[i];
            a[i].second = speed[i];
        } 
        
        sort(a.begin(),a.end());
        
        priority_queue<int>q;
        long long sum = 0 , ans = 0;
        for(int i = 1;i<=k;i++)
        {
            q.push(-a[n-i].second);
            sum += a[n-i].second;
            ans = max(ans, (sum * a[n-i].first)) ;
        }
        
        for(int i = n-k-1;i>=0;i--)
        { 
            int x = q.top();
            
            long long curr_sum = sum + x + a[i].second;
          
            curr_sum *= a[i].first;
            ans = max(ans, curr_sum);
            
            if(a[i].second > -x)
            {
                q.pop();
                q.push(-a[i].second);
                sum += x + a[i].second;
                
            }
        }
        
        return ans % mod;
    }
};
