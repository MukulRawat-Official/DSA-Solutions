/*
  this is one of classical apllication of kadane algortim 
  
  kadane algo is in form
  
  a 0 b 0 c s g ... 
  
  we need max of it one time 
  
  now in our two array (A,B) if we take 
  
  A as main array then kadane sum  = max(sum(b[i]- a[i]) , 0 );
  B as main array then kadane sum  = max( sum(a[i] - b[i]) , 0);
  
  a[i] - b[i] -> max subarray possible

*/

class Solution {
public:
    long calc(vector<int>& a , vector<int>& b)
    {
        long t = 0 , s = 0 , sum = 0;
        
        for(int i=0;i<a.size();i++)
        {
          sum+= a[i];
          s += b[i] - a[i];
            
          if(s<0)
              s = 0;
            
          t = max(s,t);
        }
        
        return sum + t;
    }
    int maximumsSplicedArray(vector<int>& nums1, vector<int>& nums2) {
        return max(calc(nums1,nums2) , calc(nums2,nums1));    
    }
};
