/*

create left and right binary trees which will search till end and give right most and left most index value..

*/

class Solution {
public:
    
    int left(vector<int>&arr,int l , int r , int t)
    {
       int  e = -1;
        
        while(l<=r)
        {
            int mid = (l+r)/2;
            
            if(arr[mid] == t)
            {
                e = mid;
                r = mid-1;
            }
            
            else if(arr[mid]>t)
                r = mid-1;
            
            else
                l = mid+1;
        }
        
        return e;
    }
    
   int right(vector<int>&arr,int l , int r , int t)
   {
       int e = -1;
       
            while(l<=r)
           {
            int mid = (l+r)/2;
            
            if(arr[mid] == t)
            {
                e = mid;
                l = mid+1;
            }
            
            else if(arr[mid]>t)
                r = mid-1;
            
            else
                l = mid+1;
        }
        
        return e;
       
   } 
    
    vector<int> searchRange(vector<int>& arr, int t) {
        
        int l = 0 , r = arr.size() - 1;
        
        
        int f = -1 , la = -1;
        
        f = left(arr,l,r,t);
        
        if(f == -1)
            return {f,la};
        
        else
        la = right(arr,f+1,r,t);
        
        if(la == -1)
            la = f;
        
        return {f,la};
        
         
    }
};
