/*

 we'll start placing columnwise for first column we'll check for all possbile column elements
 if we find a suitable position we'll place our queen and move to next column
 similarly we do for next index
 if we reach our column index after one position of last column we'll store our answer in array 

*/
class Solution {
public:
    vector<vector<string>>ans;
    
    bool isSafe(vector<string>&arr , int i , int j , int n)
    {
        for(int l = j-1 ;l >=0 ;l --)
        {
           if(arr[i][l] == 'Q')
               return false;
        }
        
        int x = i-1, y = j-1;
        
        while(x>=0 && y>=0)
        {
            if(arr[x--][y--] == 'Q')
                return false;
        }
        
        x = i + 1 , y = j-1;
        
        while(x<n && y>=0)
        {
            if(arr[x++][y--] == 'Q')
                return false;
        }
        
        return true;
    }
    
    
    
    void recurr(vector<string>&arr, int i , int j , int n)
    {
        if(j == n)
        {
            ans.push_back(arr);
            return;
        }
 
        
        for(int y = i;y<n;y++)
        {
            
            if(isSafe(arr,y,j,n))
            {
                arr[y][j] = 'Q';
                recurr(arr,0,j+1,n);
                arr[y][j] = '.';
            }
        }
        
    }
    vector<vector<string>> solveNQueens(int n) {
        string temp = "";
        
        for(int i=1;i<=n;i++)
            temp+=".";
        
        vector<string>t(n,temp);
        
       
        recurr(t, 0 , 0 , n);
        
        return ans;
    }
};
