/*
    [2,1,5,6,2,3]
    
    point to keep it mind :- we can see in above example at index 1 = 1 .. so left boundary can never reach to 2 for index > 1
    it means we can never reach an element in left if we encounter a smaller element before 
    we can only reach to end if our curr element is smaller than left boundary
    it will create new limit for elements at right
    
    
    we will maintain a single stack for previous smaller element
    
    now whenever we encounter an element need to be popped 
    we have two things for sure
    its left boundary :- which can be obtained from stack
    its right boudnary :- which will be current element 
    
    let's run example above
    
    index start from :- 0
    
    stack      element checked         left   b(index)      right b(index)              ans 
    2                 -                    -                    -                        -
    1                 2                   -1                    1                        2
    1,5
    1,5,6
    1,5,2             6                    2                    4                        6
    1,2               5                    1                    4                        10
    1,2,3
    1,2               3                    4                   -1                        3
    1                 2                    1                    5                        8
                      1                   -1                   -1                        6
                      
                      final ans = 10


*/
class Solution {
public:
    int largestRectangleArea(vector<int>& h) {
        
        int n = h.size();
        stack<int>s;
        
        s.push(0);
        int ans = 0;
        for(int i = 1;i<n;i++)
        {
            while(s.size() && h[s.top()] >= h[i])
            {
                int l , r ,  t = s.top();
                s.pop();
                
                if(s.size())
                    l = t-1-s.top();
                
                else
                    l = t;
                
                r  =  i - 1 -t;
                
                int curr = (l+r+1) * h[t];
                
                // cout<<t<<" "<<l<<" "<<r<<" "<<curr<<endl; 
                
                ans = max(ans,curr);
            }
            
            s.push(i);
        }
        
        while(s.size())
        {
           int  t = s.top();
           s.pop();
           
           int r = n-1-t;
           int l;
            
           if(s.size())
           l = t -1- s.top();
            
           else
           l= t;
           
           int curr = (l+r+1) * h[t];
            // cout<<t<<" "<<l<<" "<<r<<" "<<curr<<endl; 
            ans = max(ans,  curr);
            
        }
        
        return ans;
    }
};
