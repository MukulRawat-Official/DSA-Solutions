/*
     we need to array non deceasing  or we can say increasing 
     -> if we look from reverse we want to make array decreasing 

     so push element into stack from end one by one
     as we'll see any greater element than top il will surely delete that element
     
     to keep a counter of element deleted we can pass additional variable which will determine no 
     of elements delete
     
     now consider these cases
     
     (11,0) , 2 , 3  , (6,0) , 1 , 2
     (11,2)  (6,2)
     (11,3)  -> we element have same time or elements eaten they will be neighbour

      (11,0) , 4  , (7,0) , 2 ,3 , 1
      (11,1) (7,1) , 3, 1
      (11,2) , 1
      (11,3) -> when smaller element has larger time bigger element will have same time
      
      or   -> (11,1) (7,3) == (11,3)
      
      
      (11,0) , 2, 3 , (6,0) , 1
      (11,1) , 3 ,(6,1)
      (11,2) (6,1)
      (11,3) -> when larger element have larger time its time will increase by one
      
*/

class Solution {
public:
    int totalSteps(vector<int>& arr) {
        
        int n  = arr.size();
        int ans = 0;
        
        stack<pair<int,int>>s;
       
        for(int i=n-1;i>=0;i--)
        {
                int curr = 0;
            
                while(s.size() && arr[i] > arr[s.top().first])
                {
                    
                    int  t = s.top().first , val = s.top().second;
                    
                    
                   if(val > curr)
                        curr = val;
                    
                    else
                        curr++;
                    
                    s.pop();
                }
            
               ans  =  max(ans,curr);
               s.push({i,curr});
        }
        
        return ans;
    }
};
