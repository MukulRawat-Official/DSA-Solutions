/*
 
 count no of nodes 
 find middle
 rev other half 
 now add node one by one 

*/

typedef ListNode node;
class Solution {
public:
    int count(node **head)
    {
       node* temp = *head;
       int c = 0;
        
       while(temp != NULL)
       {
          temp=temp->next;
          c++;
       }
        
       return c;
    }
    
    node* rev(node* head)
    {
        if(head == NULL || head->next == NULL)
            return head;
        
        node* temp = rev(head->next);
        
        head->next->next = head;
        head->next = NULL;
        return temp;
    }
    
    void reorderList(ListNode* head) {
        
        if(head->next == NULL)
            return;
        
        int n = count(&head);
        
        int mid = (n+1)/2;
        
        node *temp = head ;
        int idx = 0;
        
        while(idx != mid)
        {
            idx++;
            temp = temp->next;
        }
        
        temp = rev(temp);
        node* ans = head , *ans_tail = head;
        head = head->next;
        
        while(temp != NULL)
        {
            ans_tail->next =  temp;
            temp = temp->next;
            ans_tail = ans_tail->next;
            
            ans_tail->next = head;
            ans_tail = ans_tail->next;
            head= head->next;
        }
        
        if(ans_tail!= NULL)
            ans_tail->next = NULL;
        
         head  = ans;
        
        
    }
};
