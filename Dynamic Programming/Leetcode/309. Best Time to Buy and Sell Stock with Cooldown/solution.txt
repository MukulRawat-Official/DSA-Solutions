class Solution {
public:
    vector<int>arr;
    int n;
    int dp[5001][2][2];
    
    int calc(int i , int b , int c)
    {  
        if(i == n) return 0;
        
        if(dp[i][b][c] != -1) return dp[i][b][c];
        
        if(c)
        return dp[i][b][c] =  calc(i+1,b,c-1);
        
        dp[i][b][c] = calc(i+1,b,c);
        
        if(!b)
            dp[i][b][c] =  max(dp[i][b][c] , calc(i+1,1,1) + arr[i]);
        
        else if(b)
            dp[i][b][c] = max(dp[i][b][c] , calc(i+1,0,0) - arr[i]);
        
        return dp[i][b][c];
        
    }
    int maxProfit(vector<int>& prices) {
        arr = prices;
        n = arr.size();
        memset(dp,-1,sizeof(dp));
        
        return calc(0,1,0);
    }
};
