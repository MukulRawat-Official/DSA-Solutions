/*
  
  we run through current index find it in map
  we have two choices either we create new string and serach for bigger word
  or start from next index to find new word
  
  if we are able to write down above recursive function next 
  step is to check variable changes only index variable changes 
  so dp will be 1 d

*/
class Solution {
public:
    
    int dp[301];
    
    bool recurr(string& str ,set<string>&s , int i)
    {
        if(i>= str.length())
            return dp[i] = true;
        
        if(dp[i] != -1)
            return dp[i];
        
        string temp = "";
        
        for(int l = i; l<str.length();l++)
        {
             temp+=str[l];
            
            if(s.count(temp))
            {
                if(recurr (str , s , l+1))
                    return dp[i] = true;
            }
        }
        
        return dp[i] = false;
    }
    bool wordBreak(string s, vector<string>& w) {
       set<string>se;
       memset(dp,-1,sizeof(dp)); 
        for(auto& x : w)
        se.insert(x);
        
        return recurr(s,se,0);
        
    }
};
