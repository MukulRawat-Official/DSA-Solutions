/*

 dp can be reduced to 3d as we can replace 4d dp as
 
 x1 + y1 = x2 + y2
 y2 = x1 + y1 - x2
 at each step we increase two person by only so 3d dp can work.
 
 as we need to go from top to bottom and bottom to top ->
 we can reaplace it by two bottom to top .
 
 now consider two person  with steps  (x1,y1) && (x2,y2);
 
 form recursive function adding two steps if they are not equal
 else add only one val if both are at same step ...


*/
class Solution {
public:
    int n;
    int dp[51][51][51];
    
    bool isSafe(int i , int j , int  k , int k2, vector<vector<int>>&arr)
    {
        if(i == n || j == n || k == n || k2 == n || arr[i][j] == -1 || arr[k][k2] == -1)
            return false;
        
        return true;
    }
    
    long recurr(int x1  , int y1, int x2, int y2 , vector<vector<int>>&arr)
    {
        
        if(!isSafe(x1,y1,x2,y2,arr)) return INT_MIN;
        
        if( x1 == n-1 && y1 == n-1)
        return arr[x1][y1];
        
        if(dp[x1][y1][x2] != -1) return dp[x1][y1][x2];
        
        dp[x1][y1][x2] = 0;
    
        int a = arr[x1][y1] , b = arr[x2][y2];
        arr[x1][y1] = 0 ; 
        arr[x2][y2] = 0;
        
        // ensuring  steps not counting again 
        
        int sum = 0;
        
        if(x1 == x2 && y1 == y2)
            sum = a;
        
        else
            sum = a + b;
            
        
         
        int  one  = recurr(x1+1,y1,x2,y2+1,arr);
        int  two  = recurr(x1,y1+1,x2,y2+1,arr);
        int three = recurr(x1+1,y1,x2+1,y2,arr);
        int four  = recurr(x1,y1+1,x2+1,y2,arr);
        
        arr[x1][y1] = a;
        arr[x2][y2] = b;
        
        // revoking to steps again .. 
        
        return dp[x1][y1][x2] = max({one,two,three,four}) + sum;
        
    }
    
    int cherryPickup(vector<vector<int>>& arr) {
        n  = arr.size();
        memset(dp,-1,sizeof(dp));
        
        long ans =  recurr(0,0,0,0,arr);
       
        if(ans<0) return 0;
        return ans;
      
        
        
        
    }
};
