/*
  
  in each level we can move j or j + 1 step 
  
  when we reach a level where we are at end curr answer will be   arr[i][j] only
  else
    curr = min( recurr taking current element , recurr taking next element )
    
    return answer;

  since i and j two variable are changing so 2d dp will be created

*/


class Solution {
public:
    int dp[200][200];
    int recurr(int i , int j ,vector<vector<int>>& arr)
    {
        if(i == arr.size())
            return 0;
        
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        if(j+1<arr[i].size())
            dp[i][j] = min(recurr(i+1,j,arr) + arr[i][j] , recurr(i+1 , j+1 ,arr) + arr[i][j+1]);
        
        else
            dp[i][j] = recurr(i+1,j,arr) + arr[i][j];
                   
        return dp[i][j];
    }
    int minimumTotal(vector<vector<int>>& arr) {
        memset(dp,-1,sizeof(dp));
        return (recurr(0 , 0, arr));
    }
};
