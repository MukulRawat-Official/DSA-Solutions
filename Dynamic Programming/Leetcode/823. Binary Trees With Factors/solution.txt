class Solution {
public:
    int mod = 1e9 + 7;
    unordered_map<int,int>m;
  int numFactoredBinaryTrees(vector<int>& arr) {
       sort(arr.begin(),arr.end());
       int n = arr.size();  
       long long dp[n]; 
       for(int i = 0;i<n;i++)
       {
           long long e = arr[i];
           long long t = 1;
           for(int i = 2;i<=sqrt(e);i++)
           {
              if(e % i == 0)
              {
                  int f = e/i; 
                  if(f == i){
                      if(m.count(f))
                          t += (dp[m[f]] * dp[m[f]]) % mod;
                  }
                  else if(m.count(f) && m.count(i))
                  t+=  dp[m[f]] * dp[m[i]] * 2  % mod;
              }
           }
           m[arr[i]] = i;
           dp[i] = t % mod;
       }
      
      long long sum = 0;
      
      for(auto& x : dp)
      sum += x % mod;
      
      return sum % mod;
        
    }
};
