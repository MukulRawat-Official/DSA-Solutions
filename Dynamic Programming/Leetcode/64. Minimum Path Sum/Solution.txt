/*
  
   just try to find out recurive function 
   
   two index are changin i , j  so two 2d dp will be used

*/
class Solution {
public:
    int n , m;
    vector<vector<int>>dp;
    int recurr(int i , int j ,vector<vector<int>>&arr)
    {
        if( i == n-1 && j == m-1)
            return dp[i][j] = arr[i][j];
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        dp[i][j] = arr[i][j];
        
        if(i<n-1&& j<m-1)
            dp[i][j] += min(recurr(i+1,j,arr) , recurr(i,j+1,arr));
        
        else if(i<n-1)
            dp[i][j] += recurr(i+1,j,arr);
        
        else
            dp[i][j] +=recurr(i,j+1,arr);
        
        return dp[i][j];
    }
    int minPathSum(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
        dp.resize(n , vector<int>(m,-1));
 
        
        return recurr(0,0,grid);
    }
};
