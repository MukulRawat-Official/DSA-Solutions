/*
   for base case all path will be one thill rock is encountered after that all part will be 0 as we cant move on them
   not if a rock is encountered that dp value will be 0 as it contribute to nothing 
   not solve problem as unique path one 
   
   
   Bottom up approach used
*/

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& arr) {
       
        int m = arr.size();
        int n = arr[0].size();
        
        int i;
        for( i=0;i<n;i++)
            if(arr[0][i] == 1)
                break;
        
        for( ;i<n;i++)
        arr[0][i] = 1; 
        
        
        for( i = 0;i<m;i++)
            if(arr[i][0] == 1)
                break;
        
        for( ;i<m;i++)
            arr[i][0] = 1;  // changing base cases till rock encountered
        
        int dp[m][n];
        
        for(i =0;i<n;i++)
        {
            if(arr[0][i] == 0)
                dp[0][i]=1;
            
            else
                dp[0][i]=0;
        }
           
          for(i =0;i<m;i++)
        {
            if(arr[i][0] == 0)
                dp[i][0]=1;
            
            else
                dp[i][0]=0;
        }
        
        for(int i=1;i<m;i++)
        {
             for(int j=1;j<n;j++)
             {
                 if(arr[i][j] == 1)
                     dp[i][j]=0;
                 
                 else
                     dp[i][j] = dp[i-1][j] + dp[i][j-1];
             }
        }
        
        return dp[m-1][n-1];
        
        
    }
};
